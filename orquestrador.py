from crewai import Agent, Task, Crew, Process
import os
import pydantic
from custom_tool_vendas import QueryCSVCabecalho

class AnaliseAmbos:
    def __init__(self):
        self.tool_file_path_cabecalho = os.path.join('extract/202401_NFs_Cabecalho.csv')
        self.tool_file_path_itens = os.path.join('extract/202401_NFs_Itens.csv')
        self.llm = "gpt-4o-mini"
        self._setup_crew()

    def _setup_crew(self):
        vendas_tool_cabecalho = QueryCSVCabecalho(file_path=self.tool_file_path_cabecalho)
        vendas_tool_itens = QueryCSVCabecalho(file_path=self.tool_file_path_itens)



         # === Agente Coordenador ===
        coordenador_fiscal = Agent(
            role="Coordenador Fiscal",
            goal="Analisar a solicita√ß√£o do usu√°rio e delegar corretamente as tarefas.",
            backstory=(
                "Voc√™ √© um coordenador de equipe com profundo conhecimento em dados fiscais e experi√™ncia em direcionar corretamente demandas t√©cnicas. "
                "Sua fun√ß√£o √© entender a consulta inicial e decidir quais agentes especialistas devem processar a requisi√ß√£o, garantindo precis√£o e efici√™ncia."
            ),
        memory=True,
        verbose=True,
        llm=self.llm
        )

        # === Agente 2 ===
        analista_cabecalho = Agent(
            role="Especialista em Consultas Fiscais",
            goal="Interpretar e gerar queries precisas sobre dados fiscais com base em um arquivo CSV contendo cabe√ßalhos de notas fiscais.",
            backstory=(
            "Voc√™ √© um analista de dados fiscais com ampla experi√™ncia em manipula√ß√£o de grandes volumes de dados cont√°beis e tribut√°rios. "
            "Seu trabalho consiste em interpretar arquivos estruturados, como planilhas de notas fiscais, e construir consultas l√≥gicas e eficientes "
            "com base nas colunas dispon√≠veis."
            ),
            memory=True,
            verbose=True,
            llm=self.llm
        )

        # === Agente 3 ===
        analista_itens = Agent(
            role="Especialista em Consultas de Itens Fiscais",
            goal="Interpretar e gerar queries precisas sobre dados de itens fiscais com base em um arquivo CSV.",
            backstory=(
                "Voc√™ √© um analista de dados fiscais com vasta experi√™ncia em an√°lise de itens de notas fiscais. "
                "Seu trabalho √© transformar perguntas em linguagem natural em consultas eficientes, usando pandas, com base nas colunas dispon√≠veis no CSV."
            ),
            memory=True,
            verbose=True,
            llm=self.llm
        )

        # === Task coordenador ===

        tarefa_coordenador = Task(
            description=(
                "Sua miss√£o √© interpretar a pergunta do usu√°rio: '{query}'\n\n"

                "Voc√™ √© o Coordenador Fiscal, respons√°vel por organizar e distribuir corretamente as tarefas para dois analistas especialistas:\n\n"
                "1. **Agente 'Especialista em Consultas Fiscais' (analista_cabecalho)**:\n"
                "   - Trabalha com o arquivo: 'extract/202401_NFs_Cabecalho.csv'\n"
                "   - Colunas dispon√≠veis:\n"
                "     CHAVE DE ACESSO, MODELO, S√âRIE, N√öMERO, NATUREZA DA OPERA√á√ÉO, DATA EMISS√ÉO, EVENTO MAIS RECENTE, DATA/HORA EVENTO MAIS RECENTE,\n"
                "     CPF/CNPJ Emitente, RAZ√ÉO SOCIAL EMITENTE, INSCRI√á√ÉO ESTADUAL EMITENTE, UF EMITENTE, MUNIC√çPIO EMITENTE, CNPJ DESTINAT√ÅRIO,\n"
                "     NOME DESTINAT√ÅRIO, UF DESTINAT√ÅRIO, INDICADOR IE DESTINAT√ÅRIO, DESTINO DA OPERA√á√ÉO, CONSUMIDOR FINAL, PRESEN√áA DO COMPRADOR,\n"
                "     VALOR NOTA FISCAL.\n\n"
                "2. **Agente 'Especialista em Consultas de Itens Fiscais' (analista_itens)**:\n"
                "   - Trabalha com o arquivo: 'extract/202401_NFs_Itens.csv'\n"
                "   - Colunas dispon√≠veis:\n"
                "     CHAVE DE ACESSO, MODELO, S√âRIE, N√öMERO, NATUREZA DA OPERA√á√ÉO, DATA EMISS√ÉO, CPF/CNPJ Emitente, RAZ√ÉO SOCIAL EMITENTE,\n"
                "     INSCRI√á√ÉO ESTADUAL EMITENTE, UF EMITENTE, MUNIC√çPIO EMITENTE, CNPJ DESTINAT√ÅRIO, NOME DESTINAT√ÅRIO, UF DESTINAT√ÅRIO,\n"
                "     INDICADOR IE DESTINAT√ÅRIO, DESTINO DA OPERA√á√ÉO, CONSUMIDOR FINAL, PRESEN√áA DO COMPRADOR, N√öMERO PRODUTO, DESCRI√á√ÉO DO PRODUTO/SERVI√áO,\n"
                "     C√ìDIGO NCM/SH, NCM/SH (TIPO DE PRODUTO), CFOP, QUANTIDADE, UNIDADE, VALOR UNIT√ÅRIO, VALOR TOTAL.\n\n"

                "üîó IMPORTANTE:\n"
                "A coluna **CHAVE DE ACESSO** est√° presente nos dois arquivos e **deve ser utilizada como v√≠nculo principal entre o cabe√ßalho e os itens**.\n"
                "Ou seja, para consultar os produtos relacionados a uma nota fiscal, √© necess√°rio primeiro obter a(s) `CHAVE DE ACESSO` no cabe√ßalho\n"
                "e depois us√°-la(s) para filtrar os itens correspondentes no outro arquivo.\n\n"

                "### Etapas que voc√™ deve seguir:\n"
                "1. Divida a pergunta em subtarefas, descrevendo claramente o que precisa ser respondido.\n"
                "2. Para cada subtarefa, defina:\n"
                "   - Qual informa√ß√£o deve ser buscada\n"
                "   - Em qual dos dois arquivos (cabe√ßalho ou itens)\n"
                "   - Qual agente √© o mais adequado para executar a tarefa\n"
                "3. Redija uma **query clara em linguagem natural** para cada subtarefa e delegue ao agente respons√°vel.\n"
                "4. Aguarde o retorno de cada agente e registre os resultados.\n"
                "5. Por fim, redija uma **resposta final objetiva**, combinando as informa√ß√µes recebidas, explicando **como chegou √† conclus√£o**.\n\n"

                "‚ö†Ô∏è N√£o resolva voc√™ mesmo os c√°lculos ou consultas. Sua fun√ß√£o √© apenas orquestrar a execu√ß√£o e consolidar os resultados.\n\n"

                "üìå **Instru√ß√µes espec√≠ficas para o uso da ferramenta `Delegate work to coworker`:**\n"
                "Ao usar essa ferramenta, certifique-se de passar os argumentos como **strings simples** e **bem formatadas**. O `Action Input` deve conter:\n\n"
                "- `task`: descri√ß√£o textual da tarefa, como string.\n"
                "- `context`: contexto completo da tarefa, como string.\n"
                "- `coworker`: nome exato do agente, conforme definido no atributo `role`.\n\n"
                "‚úÖ Exemplo correto:\n"
                "```\n"
                "Action: Delegate work to coworker\n"
                "Action Input:\n"
                "{\n"
                "  \"task\": \"Buscar todas as CHAVES DE ACESSO das notas fiscais emitidas em janeiro de 2024 com valor total acima de 50 mil.\",\n"
                "  \"context\": \"Use o arquivo 'extract/202401_NFs_Cabecalho.csv'. Filtre usando pandas onde VALOR NOTA FISCAL > 50000 e DATA EMISS√ÉO em janeiro. Retorne somente a coluna CHAVE DE ACESSO.\",\n"
                "  \"coworker\": \"Especialista em Consultas Fiscais\"\n"
                "}\n"
                "```\n"
            ),
    
        expected_output=(
            "Um relat√≥rio com:\n"
            "- A lista de subtarefas geradas\n"
            "- O agente escolhido para cada uma\n"
            "- A resposta obtida de cada agente\n"
            "- Uma resposta final clara para o usu√°rio, com base nessas respostas"
        ),
        agent=coordenador_fiscal
        )

        # === Task 2 ===
        tarefa_analise_cabecalho = Task(
            description=(
                "Voc√™ √© um especialista em manipula√ß√£o de dados fiscais e an√°lise de planilhas. "
                "Seu papel √© interpretar perguntas feitas por usu√°rios em linguagem natural e, com base nelas, gerar consultas em Python usando a biblioteca pandas. "
                "Essas consultas devem operar sobre um arquivo CSV que cont√©m os cabe√ßalhos de notas fiscais eletr√¥nicas emitidas no m√™s de janeiro de 2024.\n\n"

                "Voc√™ entende profundamente o significado e a estrutura de cada coluna presente no arquivo e sabe exatamente como consultar, filtrar, agrupar ou calcular valores com base nas perguntas recebidas. "
                "A consulta que voc√™ gerar ser√° executada dentro de um ambiente controlado usando a ferramenta `QueryCSV`, que executa o c√≥digo Python e retorna o conte√∫do da vari√°vel `resultado` como resposta final ao usu√°rio.\n\n"

                "O CSV cont√©m as seguintes colunas:\n\n"
                "- CHAVE DE ACESSO\n"
                "- MODELO\n"
                "- S√âRIE\n"
                "- N√öMERO\n"
                "- NATUREZA DA OPERA√á√ÉO\n"
                "- DATA EMISS√ÉO\n"
                "- EVENTO MAIS RECENTE\n"
                "- DATA/HORA EVENTO MAIS RECENTE\n"
                "- CPF/CNPJ Emitente\n"
                "- RAZ√ÉO SOCIAL EMITENTE\n"
                "- INSCRI√á√ÉO ESTADUAL EMITENTE\n"
                "- UF EMITENTE\n"
                "- MUNIC√çPIO EMITENTE\n"
                "- CNPJ DESTINAT√ÅRIO\n"
                "- NOME DESTINAT√ÅRIO\n"
                "- UF DESTINAT√ÅRIO\n"
                "- INDICADOR IE DESTINAT√ÅRIO\n"
                "- DESTINO DA OPERA√á√ÉO\n"
                "- CONSUMIDOR FINAL\n"
                "- PRESEN√áA DO COMPRADOR\n"
                "- VALOR NOTA FISCAL\n\n"

                "Com base nas colunas do CSV 202401_NFs_Cabecalho.csv escreva um c√≥digo para a solicita√ß√£o do coordenador\n\n"

                "A query deve sempre carregar o CSV com o seguinte c√≥digo:\n"
                "```python\n"
                "import pandas as pd\n"
                "df = pd.read_csv('extract/202401_NFs_Cabecalho.csv', sep=',', encoding='utf-8')\n"
                "```\n"
                "E deve armazenar o resultado final na vari√°vel `resultado`\n"
                "‚ö†Ô∏è Importante: Se o resultado for uma tabela ou agrupamento com muitas linhas, voc√™ **deve usar** `.to_string(index=False)` no final da query, para garantir que o conte√∫do completo seja exibido, sem truncamento.\n"
            ),
            expected_output="resultado em um texto simples, objetivo, de facil entendimento para o usu√°rio porem explicando o motivo da resposta",
            agent=analista_cabecalho,
            tools=[vendas_tool_cabecalho]
        )

        # === Task 3 ===
        tarefa_analise_itens = Task(
            description=(
                "Voc√™ √© um especialista em manipula√ß√£o de dados fiscais e an√°lise de planilhas. "
                "Seu papel √© interpretar perguntas feitas por usu√°rios em linguagem natural e, com base nelas, gerar consultas em Python usando a biblioteca pandas. "
                "Essas consultas devem operar sobre um arquivo CSV que cont√©m os itens de notas fiscais eletr√¥nicas emitidas no m√™s de janeiro de 2024.\n\n"

                "Voc√™ entende profundamente o significado e a estrutura de cada coluna presente no arquivo e sabe exatamente como consultar, filtrar, agrupar ou calcular valores com base nas perguntas recebidas. "
                "A consulta que voc√™ gerar ser√° executada dentro de um ambiente controlado usando a ferramenta `QueryCSV`, que executa o c√≥digo Python e retorna o conte√∫do da vari√°vel `resultado` como resposta final ao usu√°rio.\n\n"

                "O CSV cont√©m as seguintes colunas:\n\n"
                "- CHAVE DE ACESSO\n"
                "- MODELO\n"
                "- S√âRIE\n"
                "- N√öMERO\n"
                "- NATUREZA DA OPERA√á√ÉO\n"
                "- DATA EMISS√ÉO\n"
                "- CPF/CNPJ Emitente\n"
                "- RAZ√ÉO SOCIAL EMITENTE\n"
                "- INSCRI√á√ÉO ESTADUAL EMITENTE\n"
                "- UF EMITENTE\n"
                "- MUNIC√çPIO EMITENTE\n"
                "- CNPJ DESTINAT√ÅRIO\n"
                "- NOME DESTINAT√ÅRIO\n"
                "- UF DESTINAT√ÅRIO\n"
                "- INDICADOR IE DESTINAT√ÅRIO\n"
                "- DESTINO DA OPERA√á√ÉO\n"
                "- CONSUMIDOR FINAL\n"
                "- PRESEN√áA DO COMPRADOR\n"
                "- N√öMERO PRODUTO\n"
                "- DESCRI√á√ÉO DO PRODUTO/SERVI√áO\n"
                "- C√ìDIGO NCM/SH\n"
                "- NCM/SH (TIPO DE PRODUTO)\n"
                "- CFOP\n"
                "- QUANTIDADE\n"
                "- UNIDADE\n"
                "- VALOR UNIT√ÅRIO\n"
                "- VALOR TOTAL\n\n"

                "Com base nas colunas do CSV 202401_NFs_Itens.csv escreva um c√≥digo para a solicita√ß√£o do coordenador\n\n"

                "A query deve sempre carregar o CSV com o seguinte c√≥digo:\n"
                "```python\n"
                "import pandas as pd\n"
                "df = pd.read_csv('extract/202401_NFs_Itens.csv', sep=',', encoding='utf-8')\n"
                "```\n"
                "E deve armazenar o resultado final na vari√°vel `resultado`\n"
                "‚ö†Ô∏è Importante: Se o resultado for uma tabela ou agrupamento com muitas linhas, voc√™ **deve usar** `.to_string(index=False)` no final da query, para garantir que o conte√∫do completo seja exibido, sem truncamento.\n"
            ),
            expected_output="resultado em um texto simples, objetivo, de facil entendimento para o usu√°rio porem explicando o motivo da resposta",
            agent=analista_itens,
            tools=[vendas_tool_itens]
        )


        # Criar a crew com ambas as tarefas e agentes
        self.crew = Crew(
            agents=[analista_cabecalho, analista_itens],
            tasks=[tarefa_coordenador,tarefa_analise_cabecalho, tarefa_analise_itens],
            process=Process.hierarchical,
            verbose=True,
            manager_agent=coordenador_fiscal
        )

    def executar(self,query: str) -> str:
        result = self.crew.kickoff(inputs={"query": query})
        return result.raw